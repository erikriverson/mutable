\documentclass{article}
\usepackage{graphics}
\usepackage{lmodern}
%\VignetteIndexEntry{mutable}

\begin{document}

<<foo,include=FALSE,echo=FALSE>>=

options(keep.source = TRUE, width = 60)
foo <- packageDescription("mutable")
library(mutable)
library(Hmisc)

pead.bl <- data.frame(hiv = sample(c("Positive", "Negative"), 100, replace = TRUE),
                      age = rnorm(100, c(50, 40), sd = 10),
                      gender = sample(c("Male", "Female"), 100, replace = TRUE),
                      diffs = rnorm(100, 500, sd = 100),
                      inc4x = sample(c("Yes", "No"), 100, replace = TRUE),
                      bmi = rnorm(100, 30, sd = 2))

label(pead.bl$hiv) <- "HIV Status"
label(pead.bl$age) <- "Age"
label(pead.bl$gender) <- "Gender"
label(pead.bl$diffs) <- "V2 GMT - V1 GMT"
label(pead.bl$inc4x) <- "$\\frac{V1 GMT}{V2 GMT} >= 4$"
label(pead.bl$bmi) <- "BMI" 

@

\title{Design Goals of the \texttt{mutable} Package (Version \Sexpr{foo[["Version"]]})}

\author{Erik Iverson}
\maketitle

\section{What is \texttt{mutable}?}

\texttt{mutable} is: 
\begin{itemize}
  \item An R package to create statistical tables: ($\mu$ tables)
  \item Table defaults are easily changed (mutated) to meet the your exact needs 
  \item Multiple \textbf{m}ark\textbf{u}p \textbf{tables} can be produced simultaneously 
\end{itemize}

\section{How does \texttt{mutable} differ from other table-generating R packages?}

There are already several packages on CRAN that generate
tables. Several of these packages contain functions that generate a
markup version of the table. For example, you can then view the
resulting table in a PDF file compiled from \LaTeX{} or in a web
browser using HTML.

\subsection{The Hmisc package}
Perhaps the most well-known of these markup-table-producing functions are
contained in the \texttt{Hmisc} package, through the
\texttt{summary.formula} and \texttt{latex} functions.  I have used
these functions for a long time to generate \LaTeX{} tables for my
statistical reports.  They have served me and countless others very
well, and will continue to do so.

However, I began to encounter situations where the output was not just
as I had hoped. There are \texttt{latex} methods for the objects
created by \texttt{summary.formula}.  The general approach is to
create an object using summary.formula, and then pass it to the latex
function.

There are literally dozens of parameters to the latex function, many
of which control some small piece of the resulting latex output.  For
example, there is a first.hline.double parameter to control the
placment of a horizontal line, and helvetica to control the default
font used in the table. 

The main issue with this approach is that \LaTeX{} tables can be
configured to a very fine degree, and introducing a new parameter
every time I want to change a small bit of output is a painstaking
process.

Another issue related to the first was that I could not obtain an R
object with a representation of the LaTeX code that would be written
out to a file upon calling the latex function.  If this were available,
I could have finely tuned the LaTeX code ``by hand'' as it were, without
introducing new parameters to the latex function. 

More substantial changes to the output required even more challenging
procedures.  When dealing with categorical variables, I find it useful
to prohibit pagebreaks in the middle of the levels of the variable.
Adding this functionality required tracking down the appropriate
places in the function to make the change, and then hoping that it
did not break anything else.

In short, these functions take an omnibus approach to generating
markup.  If you want to alter the resulting markup code, you have to
dig into the function or introduce a new parameter.

\subsection{How does mutable differ?}
The mutable package takes a very modular, function-based approach to
generating markup tables.  Instead of defining and setting lots of
parameters to control the final output, you pass small, user-defined
functions to generate each part of the markup. In general, the user
makes one call to mutable for each column of the resulting table.


\section{The mutable function} 

Since we will be constructing tables by making multiple calls to the
\texttt{mutable} function, it pays to describe it here.  The
\texttt{mutable} function is an S3 generic function, meaning that
multiple methods are implemented depending on the first argument.  The
two that have been implemented so far are for \texttt{formula} objects
and for \texttt{function} objects.  Let us first turn our attention to
the formula interface, since this is the more common use case. 

\begin{verbatim}
mutable(formula, data, 
        summary.function = muStratSummary, 
        markup.functions = list(plain = muExportPlain,
                                html  = muExportHTML),
        colname = "Summary Statistics")
\end{verbatim}

A summary of the arguments is given in \ref{ref:args}. 

\begin{table}
  \label{ref:args}
  \caption{Arguments to \texttt{mutable.formula}}
  \begin{tabular}{|p{3cm}|p{8cm}|p{3cm}|}
    \hline\\
    argument&description&default\\
    \hline\\
    formula* & an R formula, where the left-hand side is a stratification variable
    and the right-hand side is list of variables to be included as the rows in the table &
    NA\\
    &&\\
    data* & the data.frame where variables in \texttt{formula} are found & NA\\
    &&\\
    summary.function & a function to summarize each variable. Can be generic to accomodate 
    different types of data & esummary \\
    &&\\
    format.function & function that will generate plain text the object from \texttt{summary.function}
    & eformat\\
    &&\\
    latex.function & function that will generate latex markup from \texttt{summary.function} & elatex\\
    &&\\
    html.function & function that will generate HTML markup from \texttt{summary.function}& ehtml\\
    &&\\
    colname* & a character string specifying the name of the column& NA\\
    &&\\
    subset & a subset to use of \texttt{data}& NULL\\
    \hline
  \end{tabular}
\end{table}


We define a table by calling mutable once for each column. We combine
columns into single table object with the ``+'' operator. We need a
formula and a data.frame, which will proprogate from the first call to
subsequent calls if they are not specified. This is similar in style
to how ggplot2 currently functions. In ggplot2, you combine different
``layers'' to generate a statistical graphic. The layers are combined
using the ``+'' operator, and subsequent layers will use the data
specified by the first if not overridden.

Each column (i.e., call to mutable) needs a summary.function, and
functions to generate the markup. The summary.function will operate on
your data, and return useful summary statistics.  For example, the
summary.function might return a list of the quantiles of continuous
data, and counts for categorical variables. Since the summary.function
can be generic, you can pass one function and have it operate
completely differently depending on what data it is summarizing. There
is a useful defult summary.function, which not coincidentally operates
in much the same way as summary.formula in the Hmisc package. Finally,
the colname argument must be specified.

<<demo2, results=tex>>=

form <- hiv ~ age + gender + diffs + inc4x + bmi

tab1 <- mutable(form, data = pead.bl, colname = "Variable",
                summary.function = muStratSummary,
                markup.functions = list(plain = muExportPlain,
                  latex = muExportLatex)) + 
  mutable(colname = "Combined Categories") +
  mutable(subset = hiv == "Positive", colname = "Positive") +
  mutable(subset = hiv == "Negative", colname = "Negative") +
  mutable(summary.function = muStratTest, colname = "P-value")

latex(tab1,
     caption = "Baseline Table")

@ 

This may seem like a lot of work to generate the table, but for common
types of tables such as this, wrapper functions have been and
constructed, and the user is encouraged to write their own.

\end{document}

